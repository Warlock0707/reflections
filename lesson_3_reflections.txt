# When would you want to use a remote repository rather than keeping all your work local?

A: When I want to work on the project on seperate machines. When I'm collabarating with other people on a project. As a safeguard in a event where I lose all my local files.

# Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

A: If Git automatically pulls all the changes then it might be the case that the code breaks and/or doesn't even compile. Or if another person is working on the same repository locally if might interfere with his/her work.

# Describe the differences between forks, clones, and branches. When would you use one instead of another?

A: "Clone" makes a copy of a repository from GitHub to your local machine or it can clone from one location to another on your local machine. "Forks" makes a copy of an existing repository from a account to another account. Branches are used when you want your master version to remain intact and want to try out something, but not have the fear of breaking the working version. Branches are useful when two people are working on a feature at the same time.	

# What is the benefit of having a copy of the last known state of the remote stored locally?

A: It helps to resolve and merge conflicts that occur when you're trying to merge the local branch with the remote branch.

# How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

A: Without using GitHub and Git it would be extremely difficult to track changes to what has been updated by the other person. Since you can't merge both the files and see what changes has been made the individuals. Also, you can't make pull requests. YOu'd have to manually specify which part of the codebase you want the implememter to change or correct it. 

/*
You just saw that the workflow when making changes in a separate branch is more complicated than working directly in master, especially when you need to stay up-to-date with changes others are making. Rather than simply pulling and pushing, you need to pull changes into your local master branch, merge the local master into your branch (different-oil, in our case), then push your branch to the remote before finally merging your branch into master, either locally or on GitHub.
*/

# When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

A: When you want to try out stuff. When you are making an experimental feature that you full expect to break, you break off into another branch and try it out. Kinda like a workbench. This approach allows us to utilize all the features that the Git/GitHub ecosystem provides while you go try stuff out. Also, it doesn't break the production level code that people are downloading. Also it allows other contributers to make "pull requests" and bring attention to the creater about the features or changes that they have added to make it better while also NOT breaking the production level code. 
