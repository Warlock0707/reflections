# What happens when you initialize a repository? Why do you need to do it?

A: When I run the git command 'git init' it makes a hidden folder called '.git' where it tracks all the changes that I make to the file(s) in the directory.

# How is the staging area different from the working directory and the repository? What value do you think it offers?

A: Staging area is the middle part of the process where a user can choose which file(s) he want to add to the repository.

# How can you use the staging area to make sure you have one commit per logical change?

A: Since I can see the difference betweent the latest commit and the changes that have been made in the staging area I can compare the versions and see that I have made only one logical change.

/*
"git diff" is used to see the difference between the files in the working directory and the staging area. 

"git diff --staged" is used to see the difference between the files in the staging area and the most recent commit.
*/

# What are some situations when branches would be helpful in keeping your history organized? How would branches help?

A: When I want to add an experimental feature to my codebase that might break the master version, I would create a branch to test it out. Also, I can merge those two branches together if I think that the feature is ready. In collab projects, branching is extremely useful since two people might be working on the same feature at the same time. look at this video: (https://www.youtube.com/watch?time_continue=83&v=KLKrKQFgq00)

# How do the diagrams help you visualize the branch structure?

A: BY VISUALIZING IT! 

# What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

A: The result of merging two branches together is that the features in both the branches get merged together. They can also be useful in adding a experimental feature from a branch. A bug fix. BECASUE IT MAKES SENSE. 

# What are the pros and cons of Git’s automatic merging vs. always doing merges manually?

A: Using automatic merging might prove some murky results that we don't want. It might break the codebase by introducing some logical errors and/or it might not even made the code compilable. Manually merging two branches will give us a chance to fix some conflicts that might have occurred in the code bases. 